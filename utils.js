const Registry = require('vscode-textmate').Registry
const registry = new Registry()
const JSSyntaxPath = 'JavaScript.plist'
const grammar = registry.loadGrammarFromPathSync(JSSyntaxPath)

/**
 * Cleans up the scopes array generated by vscode-textmate and converts it to a class name string
 * @param { array } scopes
 * @returns { string } class name(s)
 */
const scopesToClasses = scopes =>
  scopes
    .join(' ')
    .replace(/.js/gi, '') // remove , .js
    .replace(/\./gi, '-') // replace periods with dashes
    .replace('source', '') // remove 'source'
    .trim() // get rid of leading and trailing spaces, but not space between

/**
 * Converts the tokens array generated by vscode-textmate to an html string
 * @param { string } code
 * @param { array } tokens
 * @returns { string } html string
 */
const generateMarkup = (code, tokens) => {
  return tokens
    .map(el => {
      el.code = code.slice(el.startIndex, el.endIndex) // add a new 'code' property
      return el
    })
    .map(el => {
      const classes = scopesToClasses(el.scopes)
      return `<span class='${classes}'>${el.code}</span>` // create the markup
    })
    .join('')
}

/** converts user's code to html with tags representing the different elements
 * @param { string } code - code to tokenize
 * @param { string } language - e.g. js, python
 * @returns { string } representation of token
 */
const tokenize = (code, language) => {
  const tokens = grammar.tokenizeLine(code).tokens
  const markup = generateMarkup(code, tokens)
  return markup
}

module.exports = {
  tokenize
}
